//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Integral.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public interface MasterInterface extends com.zeroc.Ice.Object
{
    void receiveTaskInfo(String function, String lowerLimit, String upperLimit, int integrationMethod, int iterations, com.zeroc.Ice.Current current);

    void getTask(com.zeroc.Ice.Current current);

    void addPartialResult(double resultIntegral, com.zeroc.Ice.Current current);

    void attachWorker(WorkerInterfacePrx subscriber, com.zeroc.Ice.Current current);

    void deattachWorker(WorkerInterfacePrx subscriber, com.zeroc.Ice.Current current);

    void printString(String s, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Demo::MasterInterface",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Demo::MasterInterface";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_receiveTaskInfo(MasterInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_function;
        String iceP_lowerLimit;
        String iceP_upperLimit;
        int iceP_integrationMethod;
        int iceP_iterations;
        iceP_function = istr.readString();
        iceP_lowerLimit = istr.readString();
        iceP_upperLimit = istr.readString();
        iceP_integrationMethod = istr.readInt();
        iceP_iterations = istr.readInt();
        inS.endReadParams();
        obj.receiveTaskInfo(iceP_function, iceP_lowerLimit, iceP_upperLimit, iceP_integrationMethod, iceP_iterations, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getTask(MasterInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.getTask(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addPartialResult(MasterInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double iceP_resultIntegral;
        iceP_resultIntegral = istr.readDouble();
        inS.endReadParams();
        obj.addPartialResult(iceP_resultIntegral, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_attachWorker(MasterInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        WorkerInterfacePrx iceP_subscriber;
        iceP_subscriber = WorkerInterfacePrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.attachWorker(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deattachWorker(MasterInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        WorkerInterfacePrx iceP_subscriber;
        iceP_subscriber = WorkerInterfacePrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.deattachWorker(iceP_subscriber, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_printString(MasterInterface obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_s;
        iceP_s = istr.readString();
        inS.endReadParams();
        obj.printString(iceP_s, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addPartialResult",
        "attachWorker",
        "deattachWorker",
        "getTask",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "printString",
        "receiveTaskInfo"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addPartialResult(this, in, current);
            }
            case 1:
            {
                return _iceD_attachWorker(this, in, current);
            }
            case 2:
            {
                return _iceD_deattachWorker(this, in, current);
            }
            case 3:
            {
                return _iceD_getTask(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return _iceD_printString(this, in, current);
            }
            case 9:
            {
                return _iceD_receiveTaskInfo(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
